// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var WebData = require("bs-remotedata/src/WebData.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var ReactSelect = require("react-select");
var ReactWindow = require("react-window");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

((require('flag-icon-css/css/flag-icon.css')));

function countryDecoder(json) {
  return {
          label: Json_decode.field("label", Json_decode.string, json),
          value: Json_decode.field("value", Json_decode.string, json)
        };
}

function make(json) {
  try {
    return {
            TAG: /* Ok */0,
            _0: Json_decode.array(countryDecoder, json)
          };
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === Json_decode.DecodeError) {
      return {
              TAG: /* Error */1,
              _0: err._1
            };
    }
    throw err;
  }
}

var Decode = {
  countryDecoder: countryDecoder,
  make: make
};

var Country = {
  Decode: Decode
};

function CountrySelect$MenuList(Props) {
  var children = Props.children;
  var options = Props.options;
  var maxHeight = Props.maxHeight;
  var getValue = Props.getValue;
  return React.createElement(ReactWindow.FixedSizeList, {
              height: maxHeight,
              itemSize: 40,
              itemCount: options.length,
              initialScrollOffset: Math.imul(Belt_Option.getWithDefault(Belt_Array.getIndexBy(options, (function (opt) {
                              return Belt_Option.mapWithDefault(Belt_Option.flatMap(Belt_Array.get(Curry._1(getValue, undefined), 0), (function (o) {
                                                if (o == null) {
                                                  return ;
                                                } else {
                                                  return Caml_option.some(o);
                                                }
                                              })), false, (function (o) {
                                            return o === opt;
                                          }));
                            })), 0), 40),
              children: (function (props) {
                  return React.createElement("div", {
                              style: props.style
                            }, Belt_Option.getWithDefault(Belt_Array.get(React.Children.toArray(children), props.index), null));
                })
            });
}

var MenuList = {
  itemSize: 40,
  make: CountrySelect$MenuList
};

function CountrySelect$Spread(Props) {
  var props = Props.props;
  var children = Props.children;
  return React.cloneElement(children, props);
}

var Spread = {
  make: CountrySelect$Spread
};

function make$1(props) {
  return React.createElement(CountrySelect$Spread, {
              props: props,
              children: React.createElement(ReactSelect.components.Option, {
                    children: props.label,
                    className: "flag-icon flag-icon-" + props.value
                  })
            });
}

var SelectOption = {
  make: make$1
};

var url = "https://gist.githubusercontent.com/rusty-key/659db3f4566df459bd59c8a53dc9f71f/raw/4127f9550ef063121c564025f6d27dceeb279623/counties.json";

function CountrySelect(Props) {
  var match = React.useState(function () {
        
      });
  var setCountry = match[1];
  var match$1 = React.useState(function () {
        return /* Loading */1;
      });
  var setCountryData = match$1[1];
  var countryData = match$1[0];
  React.useEffect((function () {
          WebData.fromResponse(make, fetch(url)).then(function (data) {
                Curry._1(setCountryData, (function (param) {
                        return data;
                      }));
                return Promise.resolve(undefined);
              });
          
        }), []);
  if (typeof countryData !== "number") {
    if (countryData.TAG) {
      return React.createElement(ReactSelect.default, {
                  isSearchable: true,
                  onChange: (function (x) {
                      return Curry._1(setCountry, (function (param) {
                                    return Caml_option.some(x);
                                  }));
                    }),
                  options: countryData._0,
                  placeholder: "Select country",
                  components: {
                    MenuList: CountrySelect$MenuList,
                    Option: make$1
                  }
                });
    } else {
      return null;
    }
  }
  countryData === /* NotAsked */0;
  return React.createElement(ReactSelect.default, {
              isDisabled: true,
              isLoading: true
            });
}

var initialCountryData = /* Loading */1;

var make$2 = CountrySelect;

exports.Country = Country;
exports.MenuList = MenuList;
exports.Spread = Spread;
exports.SelectOption = SelectOption;
exports.initialCountryData = initialCountryData;
exports.url = url;
exports.make = make$2;
/*  Not a pure module */
